FT_PUTNBR_FD(3)           Manual del estudiante 42           FT_PUTNBR_FD(3)

NOMBRE  
       ft_putnbr_fd - escribe un número entero en un descriptor de archivo

SINOPSIS  
       #include <unistd.h>     // para write

       void ft_putnbr_fd(int n, int fd);

DESCRIPCIÓN  
       Esta función escribe el número entero `n` en el descriptor de archivo `fd`.

       El número se convierte carácter a carácter, como si lo imprimieras con printf("%d"),
       pero sin usar la librería estándar ni buffers intermedios.

       Parámetros de entrada:

       - `n`: número entero (positivo o negativo) que se desea imprimir.  
         Puede ser cualquier valor dentro del rango de `int`.

       - `fd`: descriptor de archivo donde escribir el número.  
         Ejemplos:
           - 1 → salida estándar (pantalla)
           - 2 → salida de errores
           - otro valor → archivo abierto con `open()`

       Funciones auxiliares utilizadas:

       - `write(fd, &c, 1)` → se usa para imprimir cada carácter.  
       - `ft_putchar_fd(c, fd)` → se suele usar si ya está implementada, para no repetir código.

       Variables que vamos a usar:

       - `long nb`: es el valor convertido desde `n`, usado para evitar errores al tratar con `INT_MIN`.

       ¿POR QUÉ USAMOS long?  
       El tipo `int` tiene un rango de valores entre -2147483648 y 2147483647.

       Si haces `n = -2147483648`, y luego `n = -n`,  
       estás intentando convertir ese número en positivo, pero eso no es posible en `int`,  
       porque +2147483648 no existe dentro del rango permitido.

       Este valor especial se llama **INT_MIN**, y es el único número que no se puede invertir en `int`.

       Por eso, convertimos `n` a `long` antes de hacer `nb *= -1;`.

       Ejemplo:

              int n = -2147483648;
              long nb = n;        // nb = -2147483648, sin error
              nb *= -1;           // nb = 2147483648, válido en long

       Pasos de la función:

       1. Convertimos `n` a long:
              long nb = n;

       2. Si el número es negativo, imprimimos el signo y lo volvemos positivo:
              if (nb < 0)
              {
                  ft_putchar_fd('-', fd);
                  nb *= -1;
              }

       3. Imprimimos recursivamente cada dígito:
              
              Aquí usamos recursión para imprimir primero los dígitos más significativos
              (los de la izquierda) y luego los menos significativos (los de la derecha).

              El número se descompone de esta forma:
              - El cociente `nb / 10` elimina el último dígito.
              - El resto `nb % 10` obtiene ese último dígito para imprimirlo.

              Si el número tiene varias cifras (nb >= 10),  
              llamamos a la función sobre `nb / 10`.  
              Esto imprime el número por partes, desde el primer dígito hasta el último.

              Código:

              if (nb >= 10)
                  ft_putnbr_fd(nb / 10, fd);

              Luego imprimimos el último dígito convertido a carácter:
                  ft_putchar_fd(nb % 10 + '0', fd);

              Ejemplo con nb = 123:

              → 123 >= 10 → llama a ft_putnbr_fd(12)
              → 12 >= 10 → llama a ft_putnbr_fd(1)
              → 1 < 10 → imprime '1'
              → retrocede e imprime '2'
              → retrocede e imprime '3'

              Resultado: "123" (en orden correcto).

VALOR DEVUELTO  
       No devuelve nada.  
       Si `fd` no es válido, `write` fallará internamente.  
       No se gestiona ese error dentro de la función.

NOTAS  
       Esta función convierte el número sin usar funciones como itoa o printf.  
       Es ideal para imprimir contadores, IDs o cualquier entero en terminal o archivo.  
       La recursión garantiza que los dígitos se impriman en el orden correcto.

RESUMEN  
       Convertir n a long  
       Si es negativo, imprimir '-' y hacerlo positivo  
       Imprimir recursivamente el cociente  
       Imprimir el último dígito  
       Usar ft_putchar_fd para cada carácter

42 Málaga - Coalición Void           Mayo 2025           FT_PUTNBR_FD(3)

